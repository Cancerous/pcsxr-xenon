#if 0
//
// Generated by 2.0.20353.0
//
//   fxc /Fh hq4x.vs.h /Tvs_3_0 HQ4x.fx /EVS
//
//
// Parameters:
//
//   float2 texture_size;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   texture_size c0       1
//

// Shader type: vertex 

xvs_3_0
defconst texture_size, float, vector, [1, 2], c0
config AutoSerialize=false
config AutoResource=false
config VsMaxReg=2
config VsResource=1
// VsExportCount=7

dcl_index r0.x
dcl_texcoord o0.xy
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_color o7

def c252, 0, 0, 0, 0
def c253, 0, 0, 0, 0
def c254, 0, 0, 0, 0
def c255, 0.5, 0.25, 0, 0


    exec
    vfetch r2, r0.x, position
    vfetch r1, r0.x, color
    vfetch r0.xy__, r0.x, texcoord
    alloc position
    exec
    mov oPos, r2
    alloc interpolators
    exec
    rcp r0.z, c0.y
    rcp r0.w, c0.x
    movs o1.z, r0.x
    movs o3.z, r0.x
    mov o0.xy, r0.xy
    mov o7, r1
    exec
    mul r1, r0.wzzw, c255.xxy
    add o2.y, -r1.z, r0.y
    add o2.z, r1.x, r0.x
    add o4.y, r1.z, r0.y
    add o4.z, -r1.x, r0.x
    add o5.z, r1.x, r0.x
    exec
    mul r0.z, -r1.x, c255.x
  + movs r0._, -r1.x
    add o1.xyw, -r1.wzy, r0.xy
    add o3.xyw, r1.wzy, r0.xy
    add o5.xyw, -r1.xy, r0.xy
    add o6.xyw, r1.xy, r0.xy
  + adds_prev o6.z, r0.x
    add o2.x, -r0.z, r0.x
  + movs o2.w, r0.y
    exece
    add o4.x, r0.z, r0.x
  + movs o4.w, r0.y

// PDB hint 00000000-00000000-00000000

#endif

// This microcode is in native DWORD byte order.

const DWORD g_xvs_VS[] =
{
    0x102a1101, 0x00000144, 0x00000190, 0x00000000, 0x00000024, 0x0000008c, 
    0x000000b4, 0x00000000, 0x00000000, 0x00000064, 0x0000001c, 0x00000057, 
    0xfffe0300, 0x00000001, 0x0000001c, 0x00000000, 0x00000050, 0x00000030, 
    0x00020000, 0x00010000, 0x00000040, 0x00000000, 0x74657874, 0x7572655f, 
    0x73697a65, 0x00ababab, 0x00010003, 0x00010002, 0x00010000, 0x00000000, 
    0x76735f33, 0x5f300032, 0x2e302e32, 0x30333533, 0x2e3000ab, 0x00000000, 
    0x00000001, 0x00000000, 0x00000000, 0x00000014, 0x00fc0010, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000040, 0x00000150, 0x00710002, 
    0x00000000, 0x00000000, 0x00007908, 0x00000001, 0x00000003, 0x0000000f, 
    0x00000290, 0x00100004, 0x0000a005, 0x00305006, 0x00003050, 0x0001f151, 
    0x0003f252, 0x0006f353, 0x0008f454, 0x000bf555, 0x000df656, 0x000ef7a0, 
    0x0000100c, 0x0000000a, 0x00001015, 0x0000000f, 0x00000010, 0x00001019, 
    0x0000000b, 0x00001016, 0x00000011, 0x00000012, 0x0000101a, 0x00000013, 
    0x00001017, 0x00001018, 0x0000100d, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x3f000000, 0x3e800000, 0x00000000, 
    0x00000000, 0x70153004, 0x00001200, 0xc2000000, 0x00001007, 0x00001200, 
    0xc4000000, 0x00006008, 0x600e1200, 0x12000000, 0x00006014, 0x101a1200, 
    0x22000000, 0x05f82000, 0x00000688, 0x00000000, 0x05f81000, 0x00000688, 
    0x00000000, 0x05f80000, 0x00000fc8, 0x00000000, 0xc80f803e, 0x00000000, 
    0xe2020200, 0x4c400000, 0x000000b1, 0xc2000000, 0x4c800000, 0x0000006c, 
    0xc2000000, 0x14408001, 0x0000006c, 0xe2000000, 0x14408003, 0x0000006c, 
    0xe2000000, 0xc8038000, 0x00b0b000, 0xe2000000, 0xc80f8007, 0x00000000, 
    0xe2010100, 0xc80f0001, 0x0007bc00, 0xa100ff00, 0xc8028002, 0x04c6b100, 
    0xe0010000, 0xc8048002, 0x006c6c00, 0xe0010000, 0xc8028004, 0x00c6b100, 
    0xe0010000, 0xc8048004, 0x046c6c00, 0xe0010000, 0xc8048005, 0x006c6c00, 
    0xe0010000, 0x14040000, 0x056c6c6c, 0xa101ff01, 0xc80b8001, 0x04b7b000, 
    0xe0010000, 0xc80b8003, 0x00b7b000, 0xe0010000, 0xc80b8005, 0x04b0b000, 
    0xe0010000, 0x044b8006, 0x00b0b06c, 0xe0010000, 0x14818002, 0x04c66cb1, 
    0xe0000000, 0x14818004, 0x00c66cb1, 0xe0000000, 0x00000000, 0x00000000, 
    0x00000000
};
