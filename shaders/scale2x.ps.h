#if 0
//
// Generated by 2.0.20353.0
//
//   fxc /Fh scale2x.ps.h /Tps_3_0 Scale2xPlus.fx /EPS
//
//
// Parameters:
//
//   sampler2D decal;
//   float2 texture_size;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   texture_size c0       1
//   decal        s0       1
//

// Shader type: pixel 

xps_3_0
defconst decal, sampler2d, object, [1, 1], s0
defconst texture_size, float, vector, [1, 2], c0
config AutoSerialize=false
config AutoResource=false
config PsMaxReg=6
// PsExportColorCount=1
// PsSampleControl=centers

dcl_texcoord r0.xy
dcl_texcoord1 r1
dcl_texcoord2 r2

def c252, 0, 0, 0, 0
def c253, 0, 0, 0, 0
def c254, 0, 0, 0, 0
def c255, 1, 0, 0, 0


    exec
    tfetch2D r5.xyz_, r0.xy, tf0
    tfetch2D r3._x__, r1.xy, tf0
    tfetch2D r3.x___, r2.zw, tf0
    tfetch2D r6.xyz_, r1.zw, tf0
    tfetch2D r2.xyz_, r2.xy, tf0
    alloc colors
    exec
    sne r2.w, r6.x, r2.x
  + movs r0._, r0.x
    sne r0.w, r3.y, r3.x
  + muls_prev r0.z, c0.x
    seq r1.xz, r3.xy, r2.x
  + movs r0._, r0.y
    seq r1.yw, r6.x, r3.xxy
  + muls_prev r0.x, c0.y
    mul r1, r1.wxyz, r0.w
  + frcs r0.z, r0.z
    sne r1, r1.yzwx, c255.y
  + frcs r0.y, r0.x
    exec
    mul r1.w, r1.w, r2.w
  + subsc r0.w, c255.x, r0.z
    mul r1.xyz, r2.w, r1.xyz
  + subsc r0.x, c255.x, r0.y
    cndeq r3.xyz, r1.z, r5.xyz, r2.xyz
    cndeq r4.xyz, r1.x, r5.xyz, r2.xyz
    cndeq r1.xyz, r1.y, r5.xyz, r6.xyz
    cndgt r2.xyz, r1_abs.w, r6.xyz, r5.xyz
    exece
    mul r2.xyz, r0.w, r2.xyz
    mul r1.xyz, r0.w, r1.xyz
    mad r1.xyz, r0.z, r4.xyz, r1.xyz
    mad r2.xyz, r0.z, r3.xyz, r2.xyz
    mul r0.xzw, r2.xyyz, r0.x
    mad oC0.xyz1, r1.xyz, r0.y, r0.xzw

// PDB hint 00000000-00000000-00000000

#endif

// This microcode is in native DWORD byte order.

const DWORD g_xps_PS[] =
{
    0x102a1100, 0x0000010c, 0x00000184, 0x00000000, 0x00000024, 0x000000b8, 
    0x000000e0, 0x00000000, 0x00000000, 0x00000090, 0x0000001c, 0x00000083, 
    0xffff0300, 0x00000002, 0x0000001c, 0x00000000, 0x0000007c, 0x00000044, 
    0x00030000, 0x00010000, 0x0000004c, 0x00000000, 0x0000005c, 0x00020000, 
    0x00010000, 0x0000006c, 0x00000000, 0x64656361, 0x6c00abab, 0x0004000c, 
    0x00010001, 0x00010000, 0x00000000, 0x74657874, 0x7572655f, 0x73697a65, 
    0x00ababab, 0x00010003, 0x00010002, 0x00010000, 0x00000000, 0x70735f33, 
    0x5f300032, 0x2e302e32, 0x30333533, 0x2e3000ab, 0x00000000, 0x00000001, 
    0x00000000, 0x00000000, 0x00000014, 0x01fc0010, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000040, 0x00000144, 0x10000600, 0x00000004, 
    0x00000000, 0x00002863, 0x00070007, 0x00000001, 0x00003050, 0x0000f151, 
    0x0000f252, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x3f800000, 0x00000000, 0x00000000, 0x00000000, 0x01555003, 
    0x00001200, 0xc4000000, 0x00006008, 0x600e1200, 0x12000000, 0x00006014, 
    0x00002200, 0x00000000, 0x10085001, 0x1f1ffe88, 0x00004000, 0x10083021, 
    0x1f1fffc7, 0x00004000, 0xb8083041, 0x1f1ffff8, 0x00004000, 0xb8086021, 
    0x1f1ffe88, 0x00004000, 0x10082041, 0x1f1ffe88, 0x00004000, 0x14080002, 
    0x006c6c6c, 0xe7060200, 0x0c480000, 0x00b16c6c, 0xc7030300, 0x14050001, 
    0x00b06cb1, 0xe4030200, 0x0c1a0001, 0x006cbcb1, 0xc4060300, 0x2c4f0001, 
    0x00ff1bc6, 0xe1010000, 0x2c2f0001, 0x0055b16c, 0xa701ff00, 0xb8880001, 
    0x001b1b42, 0xc10102ff, 0xb8170001, 0x001bc041, 0xc10201ff, 0xc8070003, 
    0x00c6c0c0, 0xec010502, 0xc8070004, 0x006cc0c0, 0xec010502, 0xc8070001, 
    0x00b1c0c0, 0xec010506, 0xc8070002, 0x001bc0c0, 0xee810605, 0xc8070002, 
    0x001bc000, 0xe1000200, 0xc8070001, 0x001bc000, 0xe1000100, 0xc8070001, 
    0x00c6c0c0, 0xeb000401, 0xc8070002, 0x00c6c0c0, 0xeb000302, 0xc80d0000, 
    0x00f06c00, 0xe1020000, 0xc88fc000, 0x00c0b114, 0xeb010000, 0x00000000, 
    0x00000000, 0x00000000
};
